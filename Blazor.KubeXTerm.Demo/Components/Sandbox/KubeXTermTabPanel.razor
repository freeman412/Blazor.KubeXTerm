@using Blazor.KubeXTerm.Components
@using Blazor.KubeXTerm.Demo.Services
@implements IDisposable
@inject KubeXTermTabPanelService TabPanelService

<style>
    .kxterm-tab-panel {
        display: flex;
        flex-direction: column;
        height: 100%;
        min-height: 0;
        min-width: 0; /* Added this */
    }
    
    .kxterm-tabs-container {
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        min-height: 0;
        min-width: 0; /* Added this */
        overflow: hidden;
    }
    
    .kxterm-tab-content {
        flex: 1 1 auto;
        min-height: 0;
        min-width: 0; /* Added this */
        overflow: hidden;
    }
</style>

<div class="kxterm-tab-panel">
    <MudPaper Class="ma-1 pa-1 kxterm-tabs-container" Style="height: 100%;">
        <MudTabs @bind-ActivePanelIndex="@_activeTabIndex"
                 PanelClass="border-radius-bottom kxterm-tab-content"
                 TabHeaderClass="border-radius-top"
                 Elevation="2"
                 KeepPanelsAlive="true"
                 Style="height: 100%; display: flex; flex-direction: column; min-width: 0;">
            <ChildContent>
                @foreach (var tab in TabPanelService.Tabs)
                {
                    <MudTabPanel Text="@tab.Label" 
                                 Tag="@tab.Id"
                                 ShowCloseIcon="@tab.ShowCloseIcon"
                                 Icon="@Icons.Material.Filled.Terminal"
                                 Style="flex: 1 1 auto; min-height: 0; min-width: 0; overflow: hidden;"
                                 @key="@tab.Id">
                        <div style="height: 100%; width: 100%; display: flex; flex-direction: column; min-width: 0;">
                            @tab.K8STerminalFragment
                        </div>
                    </MudTabPanel>
                }
            </ChildContent>
            <TabPanelHeader>
                <MudTooltip Text="Close tab. All data will be lost">
                    <MudIconButton Class="ml-2 pa-1" 
                                   Color="Color.Error" 
                                   Icon="@Icons.Material.Filled.Close" 
                                   OnClick="@(() => RemoveTab((Guid)context.Tag))" />
                </MudTooltip>
            </TabPanelHeader>
        </MudTabs>
    </MudPaper>
</div>

@code {
    private int _activeTabIndex = 0;

    protected override void OnInitialized()
    {
        TabPanelService.TabsChanged += OnTabsChanged;
        TabPanelService.ActiveTabChanged += OnActiveTabChanged;
        TabPanelService.Initialize();
        _activeTabIndex = TabPanelService.ActiveTabIndex;
    }

    private void OnTabsChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnActiveTabChanged(int newIndex)
    {
        _activeTabIndex = newIndex;
        InvokeAsync(StateHasChanged);
    }

    private void RemoveTab(Guid tabId)
    {
        TabPanelService.RemoveTab(tabId);
    }

    public void Dispose()
    {
        TabPanelService.TabsChanged -= OnTabsChanged;
        TabPanelService.ActiveTabChanged -= OnActiveTabChanged;
    }
}