@using k8s
@using System.IO
@using System.Text.RegularExpressions
@using FluentValidation
@inject IWebHostEnvironment Environment


@if (_isLoading)
{
    <p>Uploading...</p>
}
else
{
    <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFile">
        <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload">
                    Upload Predefined Resource
                </MudButton>
        </ActivatorContent>
    </MudFileUpload>
}


@code {
    
    [Parameter]
    public EventCallback<EventArgs> OnUploadFinished { get; set; }
    
    private IBrowserFile _loadedFile;
    private long _maxFileSize = 1024 * 1024*1024;
    private bool _isLoading;
    private FileModelFluentValidator ValidationRules = new();

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        _isLoading = true;
            try
            {
                _loadedFile = e.File;
                var path = Path.Combine(Environment.ContentRootPath, 
                    Environment.EnvironmentName,
                    "PredefinedResources",
                    e.File.Name); //Maybe validate file name later

                await using FileStream fs = new(path, FileMode.Create);
                await e.File.OpenReadStream(_maxFileSize).CopyToAsync(fs);

            }
            catch (Exception ex)
            {
                _isLoading = false;
                Console.WriteLine(ex.Message);
            }

        _isLoading = false;
        await OnUploadFinished.InvokeAsync(new EventArgs());
    }
    
    public class FileModel
    {
        public string Name { get; set; }
        public IBrowserFile File { get; set; }
    }
    
    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class FileModelFluentValidator : AbstractValidator<FileModel>
    {
        public FileModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);
            RuleFor(x => x.File)
                .NotEmpty();
            When(x => x.File != null, () =>
            {
                RuleFor(x => x.File.Size).LessThanOrEqualTo(10485760).WithMessage("The maximum file size is 10 MB");
                RuleFor(x => x.File.Name).Matches(@"\.json$", RegexOptions.IgnoreCase).WithMessage("The file must be a JSON file");            });
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<FileModel>.CreateWithOptions((FileModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}