@using Blazor.DiscoBall.Components
@inherits LayoutComponentBase

@using Blazor.KubeXTerm.Demo.Services
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor.Extensions.Components.Drawer
@using MudBlazor.Extensions.Services
@inject DrawerService DrawerService
@inject KubeXTermDrawerService KubeXTermPanelService

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Class="pl-4 pr-4" Gutters="false">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">KubeXTerm</MudText> 
        <MudIcon Icon="@Icons.Material.Outlined.Terminal" Class="ml-4" Color="Color.Primary"></MudIcon>
        <BlinkingCursor />

        <MudSpacer />

        <AuthorizeView>
            <Authorized>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mr-3">
                    <MudNavLink Match="NavLinkMatch.Prefix" Class="ml-3" Href="user"
                                Style="white-space: nowrap;">
                        @context.User.Identity?.Name
                    </MudNavLink>
                    <form action="logout" method="post" style="margin-right: 10px; margin-left: 10px">
                        <AntiforgeryToken />
                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" 
                                   Variant="Variant.Outlined">
                            <MudIcon Icon="@Icons.Material.Filled.ExitToApp" Class="mr-1" />
                            Logout
                        </MudButton>
                    </form>
                </MudStack>
            </Authorized>
            <NotAuthorized>
                <form action="login" method="post" style="margin-right: 10px; margin-left: 10px">
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary"
                               Variant="Variant.Outlined">
                        <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-1" />
                        Login
                    </MudButton>
                </form>
            </NotAuthorized>
        </AuthorizeView>

        <MudItem Class="pr-2">
            <MudBadge Visible="@(_discoAlerts > 0)" Content="@_discoAlerts" Color="Color.Error" Overlap="true" Class="mx-2 my-2">
                <button onclick="@ToggleDiscoBallMotion"><DiscoBall @ref=_discoBall Radius="18" IsColorful="@(_discoAlerts > 0)" Motion="@_discoBallIsMoving" /></button>
            </MudBadge>
        </MudItem>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" /> *@

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen"
               ClipMode="DrawerClipMode.Always"
               Elevation="2"
               Variant="@DrawerVariant.Mini">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
        <BottomDrawerStack Drawers="DrawerService.Drawers" />
        <DrawerDock></DrawerDock>
        <MudBlazor.Extensions.Components.DockedView.BottomDockView></MudBlazor.Extensions.Components.DockedView.BottomDockView>
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code 
{
    private bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    private DiscoBall _discoBall;
    private bool _discoBallIsMoving = true;
    private int _discoAlerts = 1;

    // Keep references to delegates so we can unsubscribe
    private Action _drawerServiceHandler;
    private Action _panelServiceHandler;

    private async Task ToggleDiscoBallMotion()
    {
        _discoBallIsMoving = !_discoBallIsMoving;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()  
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = "10px" // Applies globally to components that respect this property
            },
            Typography = new Typography()
            {
                Default = new DefaultTypography()
                {
                    FontFamily = [ "IBM Plex Mono", "monospace"]
                },
                H1 = new H1Typography()
                {
                    FontFamily =  [ "IBM Plex Mono", "monospace"],
                    FontSize = "2rem",
                    FontWeight = "500"
                },
                Body1 = new Body1Typography()
                {
                    FontFamily =  [ "IBM Plex Mono", "monospace"]
                }
            }
        };

        // Subscribe to DrawerService.OnChange (fires on add/remove/resize)
        _drawerServiceHandler = () => InvokeAsync(StateHasChanged);
        DrawerService.OnChange += _drawerServiceHandler;

        // (Optional) still listen to our wrapper if we want
        _panelServiceHandler = () => InvokeAsync(StateHasChanged);
        KubeXTermPanelService.DrawersChanged += _panelServiceHandler;

        StateHasChanged();
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#3190c6",
        Surface = "#141414",
        Background = "#000000",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "#000000",
        DrawerBackground = "#000000",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#7c7e85",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    private string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


