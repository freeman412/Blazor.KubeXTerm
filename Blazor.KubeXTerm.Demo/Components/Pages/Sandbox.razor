@page "/sandbox"
@using k8s;
@using k8s.Models;
@using Blazor.KubeXTerm.Utils
@using Blazor.KubeXTerm.Components

<MudGrid Spacing="2">
    <MudItem xs="4" >
        <MudPaper Class="ma-1" Style="height: 100%">
            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <MudDataGrid 
                    Items="@_podList" T="V1Pod" Hover="true"
                    Filterable="true" 
                    FilterMode="@DataGridFilterMode.Simple"
                    ShowFilterIcons="false"
                    Bordered="true"                        
                    Dense="true"
                    RowStyleFunc="@_rowStyleFunc"
                    Loading="@_podsLoading"
                    LoadingProgressColor="Color.Primary"
                    Class="pa-3">
                        <Columns>
                            <PropertyColumn Property="x => x.Name()" Title="Name" CellStyleFunc="@_cellStyleFunc"/>
                            <PropertyColumn Property="x => x.Status.Phase" Title="Status" CellStyleFunc="@_cellStyleFunc" />
                            <TemplateColumn CellStyleFunc="@_cellStyleFunc" >
                                <CellTemplate>
                                    <MudButtonGroup Class="pa-1"  Variant="Variant.Outlined">
                                        <MudTooltip Text=@($"Launch Bash Terminal For {context.Item.Name()}")>
                                            <MudIconButton Icon="@Icons.Material.Filled.Terminal" Color="Color.Warning" 
                                            OnClick="@(() => AddTabCallback(context.Item.Name(), "BASH"))"
                                            Disabled="@(context.Item.Status.Phase != "Running")"></MudIconButton>
                                        </MudTooltip>
                                        <MudTooltip Text=@($"Launch All Logs Viewer For {context.Item.Name()}")>
                                            <MudIconButton Icon="@Icons.Material.Filled.Terminal" Color="Color.Dark"
                                            OnClick="@(() => AddTabCallback(context.Item.Name(), K8sConnectionType.ALLLOGS))"
                                            Disabled="@(context.Item.Status.Phase != "Running")"></MudIconButton>
                                        </MudTooltip>
                                        <MudTooltip Text=@($"Launch Current Logs Viewer For {context.Item.Name()}")>
                                            <MudIconButton Icon="@Icons.Material.Filled.Terminal" Color="Color.Info"
                                            OnClick="@(() => AddTabCallback(context.Item.Name(), "LOGS"))"
                                            Disabled="@(context.Item.Status.Phase != "Running")"></MudIconButton>
                                        </MudTooltip>
                                        <MudTooltip Text=@($"Launch stdout Log Viewer For {context.Item.Name()}")>
                                            <MudIconButton Icon="@Icons.Material.Filled.Terminal" Color="Color.Success"
                                            OnClick="@(() => AddTabCallback(context.Item.Name(), "STDOUT"))" 
                                            Disabled="@(context.Item.Status.Phase != "Running")"></MudIconButton>
                                        </MudTooltip>
                                        <MudTooltip Text=@($"Launch stderr Log Terminal For {context.Item.Name()}")>
                                            <MudIconButton Icon="@Icons.Material.Filled.Terminal" Color="Color.Error"
                                            OnClick="@(() => AddTabCallback(context.Item.Name(), "STDERR"))" 
                                            Disabled="@(context.Item.Status.Phase != "Running")"></MudIconButton>
                                        </MudTooltip>
                                    </MudButtonGroup>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="V1Pod" PageSizeSelector="false" Class="pa-1" />
                        </PagerContent>
                    </MudDataGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>

    </MudItem>
    <MudItem xs="8">
        <MudTabs @bind-ActivePanelIndex="@_activeTabIndex"
        PanelClass="border-radius-bottom"
        TabHeaderClass="border-radius-top"
        Elevation="4"

        KeepPanelsAlive >
            <ChildContent>

                @foreach (var tab in _tabs)
                {
                    <MudTabPanel 
                    Text="@tab.Label" Tag="@tab.Id"
                    ShowCloseIcon="@tab.ShowCloseIcon"
                    Icon="@Icons.Material.Filled.Terminal"
                    @key="@tab.Id">
                        @tab.K8sTerminalFragment
                    </MudTabPanel>
                }
            </ChildContent>
            <TabPanelHeader>
                <MudTooltip Text="Close tab. All data will be lost">
                    <MudIconButton Class="ml-2 pa-1" Color="Color.Error" Icon="@Icons.Material.Filled.Close" OnClick="@((_) => RemoveTab(context))" />
                </MudTooltip>
            </TabPanelHeader>
        </MudTabs>
    </MudItem>
</MudGrid>

@code {



    private List<TabView> _tabs = new();
    private int _activeTabIndex = 0;
    private CancellationTokenSource _cancellationTokenSource;

    private bool _podsLoading = true;

    // style the rows where the Element.Position == 0 to have italic text.
    private Func<V1Pod, int, string> _rowStyleFunc => (x, i) =>
    {
        return "font-style:italic";

    };

    // style the cells according to the element's physical classification and the molar mass.
    private Func<V1Pod, string> _cellStyleFunc => x =>
    {
        return "padding: 2px";
    };


    KubernetesClientConfiguration K8sConfig = KubernetesClientConfiguration.BuildDefaultConfig();
    IKubernetes K8sContext;

    //private V1PodList _podList = new V1PodList();
    private IList<V1Pod> _podList = new List<V1Pod>();

    private async Task RefreshPodData()
    {
        //_podList = await LoadGridData();
        StateHasChanged();
    }

    private readonly object _lock = new();

    // Load the initial list of pods and start watching for changes
    private async Task LoadPodsAndWatchAsync()
    {
        string namespaceName = "default";

        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();

        try
        {
            // Step 1: Get the initial list of pods
            var initialPodList = await K8sContext.CoreV1.ListNamespacedPodAsync(
                namespaceName,
                cancellationToken: _cancellationTokenSource.Token
            );

            lock (_lock)
            {
                _podList = initialPodList.Items;

                _podsLoading = false;
            }

            // Notify the UI to re-render
            StateHasChanged();

            // Step 2: Watch for changes to the pods
            using var watch = await K8sContext.CoreV1.ListNamespacedPodWithHttpMessagesAsync(
                namespaceName,
                watch: true,
                cancellationToken: _cancellationTokenSource.Token
            );

            watch.Watch(
                onEvent: (Action<WatchEventType, V1Pod>)((eventType, pod) =>
                {
                    lock (_lock)
                    {
                        switch (eventType)
                        {
                            case WatchEventType.Added:
                                // Add new pod
                                if (!Enumerable.Any<V1Pod>(this._podList, (Func<V1Pod, bool>)(p => p.Metadata?.Name == pod.Metadata?.Name)))
                                {
                                    this._podList.Add(pod);
                                }
                                break;

                            case WatchEventType.Modified:
                                // Update existing pod
                                var existingPod = Enumerable.FirstOrDefault<V1Pod>(this._podList, (Func<V1Pod, bool>)(p => p.Metadata?.Name == pod.Metadata?.Name));
                                if (existingPod != null)
                                {
                                    this._podList.Remove(existingPod);
                                    this._podList.Add(pod);
                                }
                                break;

                            case WatchEventType.Deleted:
                                if (pod.Metadata?.Name != null)
                                {
                                    var podToRemove = _podList.FirstOrDefault(p => p.Metadata?.Name == pod.Metadata?.Name);
                                    if (podToRemove != null)
                                    {
                                        _podList.Remove(podToRemove);
                                    }
                                }
                                break;

                            case WatchEventType.Error:
                                Console.WriteLine($"Error with pod: {pod?.Metadata?.Name}");
                                break;

                            default:
                                Console.WriteLine($"Unknown event type: {eventType}");
                                break;
                        }
                    }

                    // Notify the UI to re-render
                    InvokeAsync(StateHasChanged);
                }),
                onError: (exception) =>
                {
                    Console.WriteLine($"Watch error: {exception.Message}");
                },
                onClosed: () =>
                {
                    Console.WriteLine("Watch closed.");
                }
            );

            // Keep the watch running
            await Task.Delay(Timeout.Infinite, _cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Operation was canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private class TabView
    {
        public string Label { get; set; }
        //public string Content { get; set; }
        public RenderFragment K8sTerminalFragment { get; set; }
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = false;
    }


    protected override void OnInitialized()
    {
        K8sContext = new Kubernetes(K8sConfig);
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {

        //_podList = await LoadGridData();

        await LoadPodsAndWatchAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            var welcomeTab = new TabView
            {
                Id = Guid.NewGuid(),
                Label = $"Welcome",
                K8sTerminalFragment = builder =>
                {
                    builder.OpenComponent<WelcomeTerminal>(0);
                    builder.CloseComponent();
                }

            };
            _tabs.Add(welcomeTab);
            _activeTabIndex = _tabs.Count - 1;
            StateHasChanged();
        }
    }

    private void AddTabCallback(string podName, string connectionType)
    {
        var newTab = new TabView
            {
                Id = Guid.NewGuid(),
                Label = $"{podName}",
                K8sTerminalFragment = builder =>
                {
                    builder.OpenComponent<KubernetesTerminal>(0);
                    builder.AddAttribute(1, "PodName", podName);
                    builder.AddComponentParameter(2, "K8sContext", K8sContext);
                    builder.AddComponentParameter(3, "ConnectionType", connectionType);
                    builder.CloseComponent();
                }
            };

        _tabs.Add(newTab);
        _activeTabIndex = _tabs.Count - 1; // Automatically switch to the new tab
        StateHasChanged(); // Ensure the UI updates
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="tabPanel"></param>
    public void RemoveTab(MudTabPanel tabPanel)
    {
        // Find the tab by its unique ID
        var tab = _tabs.FirstOrDefault(x => Equals(x.Id, tabPanel.Tag));
        if (tab != null)
        {
            // Get the index of the tab being removed
            var indexToBeRemoved = _tabs.IndexOf(tab);

            // Remove the tab
            _tabs.Remove(tab);

            // Adjust the active index
            if (_activeTabIndex >= _tabs.Count)
            {
                // If the active index is out of bounds, select the last tab
                _activeTabIndex = _tabs.Count - 1;
            }
            else if (_activeTabIndex > indexToBeRemoved)
            {
                // If the active tab is after the removed tab, adjust its index
                _activeTabIndex--;
            }
            else if(_activeTabIndex == indexToBeRemoved)
            {
                //if the active tab is being removed
                _activeTabIndex = 1;

                _activeTabIndex = 0; ;
            }
        }

        StateHasChanged();
    }


}