@page "/sandbox"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Blazor.KubeXTerm.Demo.Components.Dialogs
@using k8s;
@using k8s.Models;
@using Blazor.KubeXTerm.Utils
@using Blazor.KubeXTerm.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Blazor.KubeXTerm.Demo.Components.Sandbox
@using Blazor.KubeXTerm.Demo.Services

@implements IAsyncDisposable

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@attribute [Authorize]

<style>
    .sandbox-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 200px); /* Account for AppBar, padding, and bottom dock space */
        overflow: hidden;
        min-height: 0;
        min-width: 0; /* Added this */
    }
    
    .sandbox-grid {
        display: flex;
        flex: 1 1 auto;
        gap: 16px;
        min-height: 0;
        min-width: 0; /* Added this */
        overflow: hidden;
    }
    
    .sandbox-left-panel {
        flex: 0 0 33.333333%; /* Equivalent to xs="4" in a 12-column grid */
        display: flex;
        flex-direction: column;
        min-height: 0;
        min-width: 0; /* Added this */
    }
    
    .sandbox-right-panel {
        flex: 1 1 auto; /* Equivalent to xs="8" in a 12-column grid */
        display: flex;
        flex-direction: column;
        min-height: 0;
        min-width: 0; /* Added this */
    }
    
    .sandbox-scrollable {
        flex: 1 1 auto;
        overflow-y: auto;
        overflow-x: hidden;
        min-height: 0;
        min-width: 0; /* Added this */
    }
    
    .sandbox-terminal-container {
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        min-height: 0;
        min-width: 0; /* Added this */
    }
</style>

<AuthorizeView Context="authViewContext">
    <Authorized>
        <div class="sandbox-container">
            <div class="sandbox-grid">
                <div class="sandbox-left-panel">
                    <MudPaper Class="ma-1 pa-1 sandbox-scrollable">
                        <MudGrid Spacing="2">
                            <MudItem>
                                <MudRadioGroup T="string" Name="Resource Type"
                                               @bind-Value="@_resourceTypeSelected"
                                               >
                                    <MudRadio T="string" Label="Predefined" Value="@("Predefined")"></MudRadio>
                                    <MudRadio T="string" Label="Manuel" Value="@("Manuel")"></MudRadio>
                                </MudRadioGroup>
                            </MudItem>
                            @if (_resourceTypeSelected == "Predefined")
                            {
                            <MudItem xs="12" Class="ma-4">
                                <PredefinedResourceDropdown @ref=_predefinedResourceDropdown></PredefinedResourceDropdown>
                            </MudItem>
                            }
                            else
                            {
                                <MudItem xs="12">
                                    <ResourceRequestForm @ref=_resourceRequestForm></ResourceRequestForm>
                                </MudItem>
                                    
                            }
                            <MudItem xs="12" Class="ma-2">
                                <MudStack Row="true">
                                    <MudButton OnClick="@(() => RequestK8SResourceAsync(authViewContext.User.FindFirst("preferred_username")?.Value))"
                                               Color="Color.Primary" Variant="Variant.Filled"
                                               >
                                        Request Resource
                                    </MudButton>

                                    <UploadPredefinedResource
                                        OnUploadFinished="_predefinedResourceDropdown.PopulatePredifinedPodsAsync"/>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" Class="ma-4">
                                <MudPaper Class="ma-2 pa-2">
                                    <MudTextField @bind-Value="_cmd" Label="Command" 
                                                  HelperText="Custom Command. Default is /usr/local/bin/start.sh">
                                    </MudTextField>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12">
                                <PodTable Cmd="@_cmd" ></PodTable>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </div>
                <div class="sandbox-right-panel">
                    <div class="sandbox-terminal-container">
                        <KubeXTermTabPanel></KubeXTermTabPanel>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        Unauthorized
    </NotAuthorized>
</AuthorizeView>

@code {
    
    private string _resourceTypeSelected = "Predefined";
    private PredefinedResourceDropdown _predefinedResourceDropdown;
    private CancellationTokenSource _cancellationTokenSource = new();
    private ResourceRequestForm _resourceRequestForm;
    
    private string _cmd = "/usr/local/bin/start.sh"; //"/bin/sh";*/

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(_predefinedResourceDropdown != null)
            await _predefinedResourceDropdown.PopulatePredifinedPodsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel and dispose of the cancellation token source
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource?.Dispose();
    }
    
    /// <summary>
    /// Request Kubernetes resource asynchronously.
    /// </summary>
    private async Task RequestK8SResourceAsync(string username) //Probably should be generic list of ENV variable
    {
        
        if (_resourceTypeSelected == "Predefined")
        {
            //Since there is no deep copy for a k8s pod resources object
            V1Pod tmpPod = KubernetesJson.Deserialize<V1Pod>(KubernetesJson.Serialize(_predefinedResourceDropdown._selectedPredefinedPod));
            //tmpPodContainers =
            V1EnvVar tmpVar = new V1EnvVar("DYNAMIC_USER", username);
            foreach (V1Container container in tmpPod.Spec.Containers)
            {
                if (container.Env == null)
                {
                    container.Env = new List<V1EnvVar>(); // Initialize if null
                }

                container.Env.Add(tmpVar); // Add the environment variable
            }

            tmpPod.Metadata.Name = _predefinedResourceDropdown._selectedPredefinedPod.Metadata.Name 
                                   + "-" + System.Guid.NewGuid().ToString("N")[..4]; 
            await CreatePod(tmpPod);
            return;
        }

        await _resourceRequestForm.Validate();
        
        if (_resourceRequestForm.K8SRequestFormSuccess)
        {
            // Create the pod definition
            var pod = new V1Pod
                {
                    ApiVersion = "v1",
                    Kind = "Pod",
                    Metadata = new V1ObjectMeta
                    {
                        Name = _resourceRequestForm.PodName
                    },
                    Spec = new V1PodSpec
                    {
                        Containers = new[]
                        {
                        new V1Container
                        {
                            Name = _resourceRequestForm.ContainerName,
                            Image = _resourceRequestForm.ContainerImage,
                            ImagePullPolicy = _resourceRequestForm.ImagePullPolicy,
                            Env = _resourceRequestForm.EnvVars
                        }
                    },
                        ImagePullSecrets =
                        [
                            new V1LocalObjectReference
                            {
                                Name = _resourceRequestForm.ImagePullSecret
                            }
                        ]
                    }
                };

            bool result = await CreatePod((pod));
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="pod"></param>
    /// <returns></returns>
    private async Task<bool> CreatePod(V1Pod pod)
    {
        try
        {
            var createdPod = await KubeXTermK8SManager.K8SClient.CoreV1.CreateNamespacedPodAsync(pod, "default");
            Snackbar.Add($"Pod '{createdPod.Metadata.Name}' created successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating pod: {ex.Message}", Severity.Error);
            return false;
        }
        return true;
    }
    
    private Dictionary<string, string> _rowConnectionTypes = new();

    private string GetConnectionType(string podName)
    {
        if (!_rowConnectionTypes.ContainsKey(podName))
        {
            _rowConnectionTypes[podName] = Utils.K8SConnectionType.Bash; // Default value
        }
        return _rowConnectionTypes[podName];
    }

    private void SetConnectionType(string podName, string connectionType)
    {
        _rowConnectionTypes[podName] = connectionType;
    }
    
}

