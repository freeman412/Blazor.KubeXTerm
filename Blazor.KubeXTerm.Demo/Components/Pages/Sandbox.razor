@page "/sandbox"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Blazor.KubeXTerm.Demo.Components.Dialogs
@using k8s;
@using k8s.Models;
@using Blazor.KubeXTerm.Utils
@using Blazor.KubeXTerm.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Blazor.KubeXTerm.Demo.Components.Sandbox

@implements IAsyncDisposable

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

<AuthorizeView Context="AuthViewContext">
    <Authorized>
        <MudGrid Spacing="2">
            <MudItem xs="4">
                <MudPaper Class="ma-1 pa-1 overflow-auto" Style="height: calc(100vh - 105px)">
                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudRadioGroup T="string" Name="Resource Type"
                                           @bind-Value="@_resourceTypeSelected"
                                           >
                                <MudRadio T="string" Label="Predefined" Value="@("Predefined")"></MudRadio>
                                <MudRadio T="string" Label="Manuel" Value="@("Manuel")"></MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        @if (_resourceTypeSelected == "Predefined")
                        {
                        <MudItem xs="12" Class="ma-4">
                            <PredefinedResourceDropdown @ref=_predefinedResourceDropdown></PredefinedResourceDropdown>
                        </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudPaper Class="ma-2 pa-2">
                                    <MudForm @ref="_form" @bind-IsValid="@_k8SRequestFormSuccess">
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.h6">Kubernetes Pod Resource Request</MudText>
                                            </MudItem>
                                            <!-- Pod Name -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_podName" Label="Pod Name" Required="true"/>
                                            </MudItem>
                                            <!-- Container Name -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_containerName" Label="Container Name" Required="false"/>
                                            </MudItem>
                                            <!-- Container Image -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_containerImage" Label="Container Image" Required="true"/>
                                            </MudItem>
                                            <!-- Image Pull Policy -->
                                            <MudItem xs="6">
                                                <MudSelect @bind-Value="_imagePullPolicy" Label="Image Pull Policy" Required="true">
                                                    <MudSelectItem Value="@("Always")">Always</MudSelectItem>
                                                    <MudSelectItem Value="@("IfNotPresent")">IfNotPresent</MudSelectItem>
                                                    <MudSelectItem Value="@("Never")">Never</MudSelectItem>
                                                </MudSelect>
                                            </MudItem>
                                            <!-- Image Pull Secret -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_imagePullSecret" Label="Image Pull Secret"/>
                                            </MudItem>
                                            <MudItem xs="12" Class="mt-2">
                                                <MudGrid>
                                                    <MudItem xs="6">
                                                        <MudText Typo="Typo.h6">Environment Variables</MudText>
                                                    </MudItem>
                                                    <MudItem xs="6">
                                                        <MudIconButton
                                                            Icon="@Icons.Material.Filled.Add" Size="Size.Small"
                                                            Color="Color.Primary"
                                                            OnClick="@(() => AddEnvVar())"/>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudItem>
                                            <MudItem xs="12">

                                                <MudTable Items="_envVars" Bordered="false" Dense="true">
                                                    <HeaderContent>
                                                        <MudTh>Name</MudTh>
                                                        <MudTh>Value</MudTh>
                                                        <MudTh></MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate>
                                                        <MudTd>
                                                            <MudTextField @bind-Value="context.Name" Placeholder="Enter name"/>
                                                        </MudTd>
                                                        <MudTd>
                                                            <MudTextField @bind-Value="context.Value" Placeholder="Enter value"/>
                                                        </MudTd>
                                                        <MudTd>
                                                            <MudGrid>
                                                                <MudItem xs="6">

                                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                                   Size="Size.Small"
                                                                                   Color="Color.Error"
                                                                                   OnClick="@(() => DeleteEnvVar(context))">
                                                                    </MudIconButton></MudItem></MudGrid>
                                                        </MudTd>
                                                    </RowTemplate>
                                                </MudTable>
                                            </MudItem>

                                            <!-- Submit Button -->
                                            
                                        </MudGrid>
                                    </MudForm>
                                </MudPaper>
                            </MudItem>
                        }
                        <MudItem xs="12" Class="ma-2">
                            <MudStack Row="true">
                                <MudButton OnClick="RequestK8SResourceAsync" Color="Color.Primary" Variant="Variant.Filled">
                                    Request Resource
                                </MudButton>
                                <UploadPredefinedResource
                                    OnUploadFinished="_predefinedResourceDropdown.PopulatePredifinedPodsAsync"/>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12" Class="ma-4">
                            <MudPaper Class="ma-2 pa-2">
                                <MudTextField @bind-Value="_cmd" Label="Command" HelperText="Custom Command. Default is /bin/sh">

                                </MudTextField>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12">
                            <MudPaper Class="ma-2">
                                <MudItem xs="12">
                                    @if (_k8SError)
                                    {
                                        <MudText Class="ma-4">
                                            Kubernetes Error! For this demo, your application must be able to successfully call KubernetesClientConfiguration.BuildDefaultConfig();
                                        </MudText>
                                    }
                                    else
                                    {
                                        if (_watching)
                                        {
                                            <MudDataGrid Items="@_podList"
                                                         T="V1Pod"
                                                         Hover="true"
                                                         Filterable="true"
                                                         FilterMode="@DataGridFilterMode.Simple"
                                                         QuickFilter="@PodQuickFilter"
                                                         ShowFilterIcons="false"
                                                         Bordered="true"
                                                         Dense="true"
                                                         RowStyleFunc="@RowStyleFunc"
                                                         Loading="@_podsLoading"
                                                         LoadingProgressColor="Color.Primary"
                                                         FixedHeader Height="400px">
                                                <ToolBarContent>
                                                    <MudGrid>
                                                        <MudItem xs="6"><MudText Typo="Typo.h6">Pod Status</MudText></MudItem>
                                                        <MudItem xs="6"><MudTextField @bind-Value="_podSearchString" Placeholder="Search"
                                                                                      Adornment="Adornment.Start" Immediate="true"
                                                                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                                                                      IconSize="Size.Medium" Class="mt-4"></MudTextField></MudItem>
                                                        
                                                    </MudGrid>
                                                </ToolBarContent>
                                                <Columns>
                                                    <!-- Pod Name -->
                                                    <PropertyColumn Property="x => x.Name()"
                                                                    Title="Name"
                                                                    CellStyleFunc="@CellStyleFunc"/>
                                                    <PropertyColumn Property="@(x => GetEnvValueFromV1Pod(x, "DYNAMIC_USER"))"
                                                                    Title= "User"
                                                                    CellStyleFunc="@CellStyleFunc"/>

                                                    <!-- Pod Phase (e.g., Running, Pending) -->
                                                    @* <PropertyColumn Property="x => x.Status.Phase" *@
                                                    @*                 Title="Status" *@
                                                    @*                 CellStyleFunc="@_cellStyleFunc" /> *@

                                                    <!-- Container States -->
                                                    <TemplateColumn Title="Container State"
                                                                    CellStyleFunc="@CellStyleFunc">
                                                        <CellTemplate>
                                                            @if (context.Item.Status?.ContainerStatuses != null)
                                                            {
                                                                <ul>
                                                                    @foreach (var containerStatus in context.Item.Status.ContainerStatuses)
                                                                    {
                                                                        <li>
                                                                            <b>@containerStatus.Name:</b> @GetContainerState(containerStatus)
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            }
                                                            else
                                                            {
                                                                <span>No data</span>
                                                            }
                                                        </CellTemplate>
                                                    </TemplateColumn>

                                                    <!-- Menu Actions -->
                                                    <TemplateColumn Title="Actions"
                                                                    CellStyleFunc="@CellStyleFunc">
                                                        <CellTemplate>
                                                            <MudMenu Icon="@Icons.Material.Filled.Terminal" Color="Color.Info">
                                                                <MudMenuItem Disabled="@(context.Item.Status.Phase != "Running")"
                                                                             OnClick="@(() => AddTabCallback(context.Item.Name(), K8SConnectionType.Bash))">
                                                                    @($"Exec Shell")
                                                                </MudMenuItem>
                                                                <MudMenuItem OnClick="@(() => AddTabCallback(context.Item.Name(), K8SConnectionType.Alllogs))">
                                                                    @($"All logs")
                                                                </MudMenuItem>
                                                                <MudMenuItem Disabled="@(context.Item.Status.Phase != "Running")"
                                                                             OnClick="@(() => AddTabCallback(context.Item.Name(), K8SConnectionType.Logs))">
                                                                    @($"Current logs")
                                                                </MudMenuItem>
                                                                <MudMenuItem Disabled="@(context.Item.Status.Phase != "Running")"
                                                                             OnClick="@(() => AddTabCallback(context.Item.Name(), K8SConnectionType.Stdout))">
                                                                    @($"stdout logs")
                                                                </MudMenuItem>
                                                                <MudMenuItem Disabled="@(context.Item.Status.Phase != "Running")"
                                                                             OnClick="@(() => AddTabCallback(context.Item.Name(), K8SConnectionType.Stderr))">
                                                                    @($"stderr logs")
                                                                </MudMenuItem>
                                                            </MudMenu>
                                                        </CellTemplate>
                                                    </TemplateColumn>

                                                    <!-- Delete Action -->
                                                    <TemplateColumn Title="Delete">
                                                        <CellTemplate>
                                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                           OnClick="@(() => DeleteK8SPodAsync(context.Item))">
                                                            </MudIconButton>
                                                        </CellTemplate>
                                                    </TemplateColumn>
                                                </Columns>

                                                @*                                     <!-- Pager Content -->
                                    <PagerContent>
                                        <MudDataGridPager T="V1Pod" PageSizeSelector="false" Class="pa-1" />
                                    </PagerContent> *@
                                            </MudDataGrid>
                                        }
                                        else
                                        {
                                            <MudPaper Class="pa-4" Elevation="4">
                                                <MudGrid Spacing="2">
                                                    <MudItem xs="12" Class="d-flex justify-center align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mud-icon-size-48" Color="Color.Error"></MudIcon>
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        <MudText Typo="Typo.h5" Class="font-weight-bold" Color="@Color.Error">
                                                            Kubernetes Watch Connection Failed
                                                        </MudText>
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        <MudText Typo="Typo.body1">
                                                            Unable to establish a connection to the Kubernetes watch stream. Please check your connection or cluster status and try again.
                                                        </MudText>
                                                    </MudItem>
                                                    <MudItem xs="12" Class="mt-2">
                                                        <MudButton OnClick="LoadPodsAndWatchAsync" Color="Color.Error" Variant="Variant.Filled" Style="width: 150px;">
                                                            <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-1"/>
                                                            Restart
                                                        </MudButton>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudPaper>

                                        }
                                    }
                                </MudItem>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="8">
                <MudPaper Class="ma-1 pa-1" Style="height: calc(100vh - 105px)">
                    <MudTabs @bind-ActivePanelIndex="@_activeTabIndex"
                             PanelClass="border-radius-bottom"
                             TabHeaderClass="border-radius-top"
                             Elevation="4"
                             KeepPanelsAlive>
                        <ChildContent>

                            @foreach (var tab in _tabs)
                            {
                                <MudTabPanel Text="@tab.Label" Tag="@tab.Id"
                                             ShowCloseIcon="@tab.ShowCloseIcon"
                                             Icon="@Icons.Material.Filled.Terminal"
                                             @key="@tab.Id">
                                    @tab.K8STerminalFragment
                                </MudTabPanel>
                            }
                        </ChildContent>
                        <TabPanelHeader>
                            <MudTooltip Text="Close tab. All data will be lost">
                                <MudIconButton Class="ml-2 pa-1" Color="Color.Error" Icon="@Icons.Material.Filled.Close" OnClick="@((_) => RemoveTab(context))" />
                            </MudTooltip>
                        </TabPanelHeader>
                    </MudTabs>
                </MudPaper>
            </MudItem>

        </MudGrid>       
    </Authorized>
    <NotAuthorized>
        Unauthorized
    </NotAuthorized>
</AuthorizeView>

@code {
    private PredefinedResourceDropdown _predefinedResourceDropdown;
    private string _resourceTypeSelected = "Predefined";
    private string _connectionTypeSelected = Utils.K8SConnectionType.Bash;
    private List<TabView> _tabs = new();
    private int _activeTabIndex = 0;
    private CancellationTokenSource _cancellationTokenSource = new();
    private bool _podsLoading = true;
    bool _k8SError = false;
    private KubernetesClientConfiguration _k8SConfig;
    private IKubernetes _k8SClient;

    private MudForm _form;
    private bool _resourceRequestIsExpanded = false;
    private string _expandResourceRequestButtonIcon = Icons.Material.Filled.ExpandMore;
    
    /// <summary>
    /// 
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var welcomeTab = new TabView
            {
                Id = Guid.NewGuid(),
                Label = $"Welcome",
                K8STerminalFragment = builder =>
                {
                    builder.OpenComponent<WelcomeTerminal>(0);
                    builder.CloseComponent();
                }

            };
            _tabs.Add(welcomeTab);
            _activeTabIndex = _tabs.Count - 1;
            StateHasChanged();
        }
    }
    
    private void ExpandResourceRequest()
    {
        _resourceRequestIsExpanded = !_resourceRequestIsExpanded;
        if (_resourceRequestIsExpanded)
            _expandResourceRequestButtonIcon = Icons.Material.Filled.ExpandLess;
        else
            _expandResourceRequestButtonIcon = Icons.Material.Filled.ExpandMore;

    }
    private bool _k8SRequestFormSuccess;
    private List<V1EnvVar> _envVars = new()
    {
        new V1EnvVar { Name = "", Value = "" }
    };
    private void AddEnvVar()
    {
        _envVars.Add(new V1EnvVar("", ""));
    }
    private void DeleteEnvVar(V1EnvVar env)
    {
        _envVars.Remove(env);
    }

    
    
    //podview variables

    private string _podSearchString;
    private Func<V1Pod, bool> PodQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_podSearchString))
            return true;

        if (x.Name().Contains(_podSearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    // Form fields
    private string _podName = string.Empty;
    private string _containerName;
    private string _containerImage;
    private string _imagePullPolicy = "Always";
    private string _imagePullSecret;
    private string _cmd = "/bin/sh";

    List<int> _sizeOptions = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

    private string GetContainerState(V1ContainerStatus containerStatus)
    {
        if (containerStatus.State?.Waiting != null)
            return $"Waiting: {containerStatus.State.Waiting.Reason}";
        if (containerStatus.State?.Running != null)
            return "Running";
        if (containerStatus.State?.Terminated != null)
            return $"Terminated: {containerStatus.State.Terminated.Reason}";

        return "Unknown";
    }

    /// <summary>
    /// Request Kubernetes resource asynchronously.
    /// </summary>
    private async Task RequestK8SResourceAsync()
    {
        await _form.Validate();
        if (_resourceTypeSelected == "Predefined")
        {
            //Since there is no deep copy for a k8s pod resources object
            V1Pod tmpPod = KubernetesJson.Deserialize<V1Pod>(KubernetesJson.Serialize(_predefinedResourceDropdown._selectedPredefinedPod));
            tmpPod.Metadata.Name = _predefinedResourceDropdown._selectedPredefinedPod.Metadata.Name 
                                   + "-" + System.Guid.NewGuid().ToString("N")[..4]; 
            await CreatePod(tmpPod);
            return;
        }
        
        
        
        if (string.IsNullOrEmpty(_containerName))
            _containerName = _podName;

        if (_k8SRequestFormSuccess)
        {
            // Create the pod definition
            var pod = new V1Pod
                {
                    ApiVersion = "v1",
                    Kind = "Pod",
                    Metadata = new V1ObjectMeta
                    {
                        Name = _podName
                    },
                    Spec = new V1PodSpec
                    {
                        Containers = new[]
                        {
                        new V1Container
                        {
                            Name = _containerName,
                            Image = _containerImage,
                            ImagePullPolicy = _imagePullPolicy,
                            Env = _envVars
                        }
                    },
                        ImagePullSecrets =
                        [
                            new V1LocalObjectReference
                            {
                                Name = _imagePullSecret
                            }
                        ]
                    }
                };

            bool result = await CreatePod((pod));
        }
    }

    private string GetEnvValueFromV1Pod(V1Pod pod, string variableName)
    {
        string val = pod.Spec?.Containers?.FirstOrDefault()?.Env?.FirstOrDefault(e => e.Name == variableName)?.Value;
        return val ?? "";
    }

    private async Task<bool> CreatePod(V1Pod pod)
    {
        try
        {
            var createdPod = await _k8SClient.CoreV1.CreateNamespacedPodAsync(pod, "default");
            Snackbar.Add($"Pod '{createdPod.Metadata.Name}' created successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating pod: {ex.Message}", Severity.Error);
            return false;
        }
        return true;
    }
    
    /// <summary>
    /// Parses a pod from a JSON string.
    /// </summary>
    /// <param name="jsonContent"></param>
    /// <returns></returns>
    private async Task<V1Pod> ParsePodsFromJson(string jsonContent)
    {
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            WriteIndented = true,
            Converters =
            {
                new JsonStringEnumConverter()
            } 
        };

        using var stream = new MemoryStream(Encoding.UTF8.GetBytes(jsonContent));
        // Parse the JSON string to a Kubernetes object
        var pod = await System.Text.Json.JsonSerializer.DeserializeAsync<V1Pod>(stream, options, _cancellationTokenSource.Token);

        return pod;
    }
    
    /// <summary>
    ///  Deletes a Kubernetes Pod.
    /// </summary>
    /// <param name="pod"></param>
    private async Task DeleteK8SPodAsync(V1Pod pod)
    {
        try
        {
            // Delete the pod from the specified namespace
            await _k8SClient.CoreV1.DeleteNamespacedPodAsync(
                name: pod.Name(),
                namespaceParameter: pod.Namespace());

            Console.WriteLine($"Pod '{pod.Name()}' deleted successfully from namespace '{pod.Namespace()}'.");
            Snackbar.Add($"Pod '{pod.Name()}' deleted successfully from namespace '{pod.Namespace()}'.", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting pod '{pod.Name()}': {ex.Message}");
        }
    }


    // style the rows where the Element.Position == 0 to have italic text.
    private Func<V1Pod, int, string> RowStyleFunc => (x, i) =>
    {
        return "font-style:italic";

    };

    // style the cells according to the element's physical classification and the molar mass.
    private Func<V1Pod, string> CellStyleFunc => x =>
    {
        return "padding: 2px; margin: 1px; text-align: center";
    };

    private Dictionary<string, string> _rowConnectionTypes = new();

    private string GetConnectionType(string podName)
    {
        if (!_rowConnectionTypes.ContainsKey(podName))
        {
            _rowConnectionTypes[podName] = Utils.K8SConnectionType.Bash; // Default value
        }
        return _rowConnectionTypes[podName];
    }

    private void SetConnectionType(string podName, string connectionType)
    {
        _rowConnectionTypes[podName] = connectionType;
    }


    //private V1PodList _podList = new V1PodList();
    private IList<V1Pod> _podList = new List<V1Pod>();

    private readonly object _lock = new();
    private bool _watching = true;

    // Load the initial list of pods and start watching for changes
    private async Task LoadPodsAndWatchAsync()
    {
        _podsLoading = true;
        string namespaceName = "default";
        StateHasChanged();

        try
        {
            // Step 1: Get the initial list of pods
            var initialPodList = await _k8SClient.CoreV1.ListNamespacedPodAsync(
                namespaceName,
                cancellationToken: _cancellationTokenSource.Token
            );

            lock (_lock)
            {
                _podList = initialPodList.Items;

                _podsLoading = false;
            }
            _watching = true;
            // Notify the UI to re-render
            StateHasChanged();

            // Step 2: Watch for changes to the pods
            using var watch = await _k8SClient.CoreV1.ListNamespacedPodWithHttpMessagesAsync(
                namespaceName,
                watch: true,
                cancellationToken: _cancellationTokenSource.Token 
               
            );

            watch.Watch(
                onEvent: (Action<WatchEventType, V1Pod>)((eventType, pod) =>
                {
                    lock (_lock)
                    {
                        switch (eventType)
                        {
                            case WatchEventType.Added:
                                // Add new pod
                                if (!Enumerable.Any<V1Pod>(this._podList, (Func<V1Pod, bool>)(p => p.Metadata?.Name == pod.Metadata?.Name)))
                                {
                                    this._podList.Add(pod);
                                }
                                break;

                            case WatchEventType.Modified:
                                // Update existing pod
                                var existingPod = Enumerable.LastOrDefault<V1Pod>(this._podList, (Func<V1Pod, bool>)(p => p.Metadata?.Name == pod.Metadata?.Name));
                                if (existingPod != null)
                                {
                                    this._podList.Remove(existingPod);
                                    this._podList.Add(pod);
                                }
                                break;

                            case WatchEventType.Deleted:
                                if (pod.Metadata?.Name != null)
                                {
                                    var podToRemove = _podList.LastOrDefault(p => p.Metadata?.Name == pod.Metadata?.Name);
                                    if (podToRemove != null)
                                    {
                                        _podList.Remove(podToRemove);
                                    }
                                }
                                break;

                            case WatchEventType.Error:
                                Console.WriteLine($"Error with pod: {pod?.Metadata?.Name}");
                                break;

                            default:
                                Console.WriteLine($"Unknown event type: {eventType}");
                                break;
                        }
                    }

                    // Notify the UI to re-render
                    InvokeAsync(StateHasChanged);
                }),
                onError: (exception) =>
                {
                    Console.WriteLine($"Watch error: {exception.Message}");
                    _watching = false;
                    // Notify the UI to re-render
                    InvokeAsync(StateHasChanged);
                },
                onClosed: () =>
                {
                    Console.WriteLine("Watch closed.");
                    _watching = false;
                    // Notify the UI to re-render
                    InvokeAsync(StateHasChanged);
                }
            );

            // Keep the watch running
            await Task.Delay(Timeout.Infinite, _cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Operation was canceled.");
            _podsLoading = false;
            _watching = false;
            // Notify the UI to re-render
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            _podsLoading = false;
            _watching = false;
            // Notify the UI to re-render
            InvokeAsync(StateHasChanged);
        }
    }

    private class TabView
    {
        public string Label { get; set; }
        //public string Content { get; set; }
        public RenderFragment K8STerminalFragment { get; set; }
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = false;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _k8SConfig = KubernetesClientConfiguration.BuildDefaultConfig();
                _k8SClient = new Kubernetes(_k8SConfig);

                await LoadPodsAndWatchAsync();
            }

            catch (Exception e)
            {
                ShowKubernetesErrorDialog(e.Message);
                _podsLoading = false;
                _k8SError = true;
                StateHasChanged(); //def need this!
            }
        }

        if(_predefinedResourceDropdown != null)
            await _predefinedResourceDropdown.PopulatePredifinedPodsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        
    }

    private void ShowKubernetesErrorDialog(string errorMessage)
    {
        var parameters = new DialogParameters
    {
        { "ErrorMessage", errorMessage }
    };

        DialogService.Show<KubernetesErrorDialog>("Kubernetes Configuration Error", parameters);
    }

    

    private void AddTabCallback(string podName, string connectionType)
    {
        var newTab = new TabView
            {
                Id = Guid.NewGuid(),
                Label = $"{podName}",
                K8STerminalFragment = builder =>
                {
                    builder.OpenComponent<KubernetesTerminal>(0);
                    builder.AddAttribute(1, "PodName", podName);
                    builder.AddComponentParameter(2, "K8sContext", _k8SClient);
                    builder.AddComponentParameter(3, "ConnectionType", connectionType);
                    builder.AddComponentParameter(4, "Command", _cmd.Trim().Split(" "));
                    builder.CloseComponent();
                }
            };

        _tabs.Add(newTab);
        _activeTabIndex = _tabs.Count - 1; // Automatically switch to the new tab
        StateHasChanged(); // Ensure the UI updates
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="tabPanel"></param>
    public void RemoveTab(MudTabPanel tabPanel)
    {
        // Find the tab by its unique ID
        var tab = _tabs.FirstOrDefault(x => Equals(x.Id, tabPanel.Tag));
        if (tab != null)
        {
            // Get the index of the tab being removed
            var indexToBeRemoved = _tabs.IndexOf(tab);

            // Remove the tab
            _tabs.Remove(tab);

            // Adjust the active index
            if (_activeTabIndex >= _tabs.Count)
            {
                // If the active index is out of bounds, select the last tab
                _activeTabIndex = _tabs.Count - 1;
            }
            else if (_activeTabIndex > indexToBeRemoved)
            {
                // If the active tab is after the removed tab, adjust its index
                _activeTabIndex--;
            }
            else if (_activeTabIndex == indexToBeRemoved)
            {
                //if the active tab is being removed
                _activeTabIndex = 1;

                _activeTabIndex = 0; ;
            }
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel and dispose of the cancellation token source
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource?.Dispose();
    }
}

