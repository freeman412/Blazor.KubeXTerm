@page "/sandbox"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Blazor.KubeXTerm.Demo.Components.Dialogs
@using k8s;
@using k8s.Models;
@using Blazor.KubeXTerm.Utils
@using Blazor.KubeXTerm.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Blazor.KubeXTerm.Demo.Components.Sandbox
@using Blazor.KubeXTerm.Demo.Services

@implements IAsyncDisposable

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject KubeXTermK8SManager KubeXTermK8SManager

@attribute [Authorize]

<AuthorizeView Context="AuthViewContext">
    <Authorized>
        <MudGrid Spacing="2">
            <MudItem xs="4">
                <MudPaper Class="ma-1 pa-1 overflow-auto" Style="height: calc(100vh - 105px)">
                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudRadioGroup T="string" Name="Resource Type"
                                           @bind-Value="@_resourceTypeSelected"
                                           >
                                <MudRadio T="string" Label="Predefined" Value="@("Predefined")"></MudRadio>
                                <MudRadio T="string" Label="Manuel" Value="@("Manuel")"></MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        @if (_resourceTypeSelected == "Predefined")
                        {
                        <MudItem xs="12" Class="ma-4">
                            <PredefinedResourceDropdown @ref=_predefinedResourceDropdown></PredefinedResourceDropdown>
                        </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudPaper Class="ma-2 pa-2">
                                    <MudForm @ref="_form" @bind-IsValid="@_k8SRequestFormSuccess">
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.h6">Kubernetes Pod Resource Request</MudText>
                                            </MudItem>
                                            <!-- Pod Name -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_podName" Label="Pod Name" Required="true"/>
                                            </MudItem>
                                            <!-- Container Name -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_containerName" Label="Container Name" Required="false"/>
                                            </MudItem>
                                            <!-- Container Image -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_containerImage" Label="Container Image" Required="true"/>
                                            </MudItem>
                                            <!-- Image Pull Policy -->
                                            <MudItem xs="6">
                                                <MudSelect @bind-Value="_imagePullPolicy" Label="Image Pull Policy" Required="true">
                                                    <MudSelectItem Value="@("Always")">Always</MudSelectItem>
                                                    <MudSelectItem Value="@("IfNotPresent")">IfNotPresent</MudSelectItem>
                                                    <MudSelectItem Value="@("Never")">Never</MudSelectItem>
                                                </MudSelect>
                                            </MudItem>
                                            <!-- Image Pull Secret -->
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="_imagePullSecret" Label="Image Pull Secret"/>
                                            </MudItem>
                                            <MudItem xs="12" Class="mt-2">
                                                <MudGrid>
                                                    <MudItem xs="6">
                                                        <MudText Typo="Typo.h6">Environment Variables</MudText>
                                                    </MudItem>
                                                    <MudItem xs="6">
                                                        <MudIconButton
                                                            Icon="@Icons.Material.Filled.Add" Size="Size.Small"
                                                            Color="Color.Primary"
                                                            OnClick="@(() => AddEnvVar())"/>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudItem>
                                            <MudItem xs="12">

                                                <MudTable Items="_envVars" Bordered="false" Dense="true">
                                                    <HeaderContent>
                                                        <MudTh>Name</MudTh>
                                                        <MudTh>Value</MudTh>
                                                        <MudTh></MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate>
                                                        <MudTd>
                                                            <MudTextField @bind-Value="context.Name" Placeholder="Enter name"/>
                                                        </MudTd>
                                                        <MudTd>
                                                            <MudTextField @bind-Value="context.Value" Placeholder="Enter value"/>
                                                        </MudTd>
                                                        <MudTd>
                                                            <MudGrid>
                                                                <MudItem xs="6">

                                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                                   Size="Size.Small"
                                                                                   Color="Color.Error"
                                                                                   OnClick="@(() => DeleteEnvVar(context))">
                                                                    </MudIconButton></MudItem></MudGrid>
                                                        </MudTd>
                                                    </RowTemplate>
                                                </MudTable>
                                            </MudItem>

                                            <!-- Submit Button -->
                                            
                                        </MudGrid>
                                    </MudForm>
                                </MudPaper>
                            </MudItem>
                        }
                        <MudItem xs="12" Class="ma-2">
                            <MudStack Row="true">
                                <MudButton OnClick="@(() => RequestK8SResourceAsync(AuthViewContext.User.FindFirst("preferred_username")?.Value))"
                                           Color="Color.Primary" Variant="Variant.Filled">
                                    Request Resource
                                </MudButton>

                                <UploadPredefinedResource
                                    OnUploadFinished="_predefinedResourceDropdown.PopulatePredifinedPodsAsync"/>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12" Class="ma-4">
                            <MudPaper Class="ma-2 pa-2">
                                <MudTextField @bind-Value="_cmd" Label="Command" HelperText="Custom Command. Default is /bin/sh">

                                </MudTextField>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12">
                            <PodTable ></PodTable>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="8">
                <MudPaper Class="ma-1 pa-1" Style="height: calc(100vh - 105px)">
                    <MudTabs @bind-ActivePanelIndex="@_activeTabIndex"
                             PanelClass="border-radius-bottom"
                             TabHeaderClass="border-radius-top"
                             Elevation="4"
                             KeepPanelsAlive>
                        <ChildContent>

                            @foreach (var tab in _tabs)
                            {
                                <MudTabPanel Text="@tab.Label" Tag="@tab.Id"
                                             ShowCloseIcon="@tab.ShowCloseIcon"
                                             Icon="@Icons.Material.Filled.Terminal"
                                             @key="@tab.Id">
                                    @tab.K8STerminalFragment
                                </MudTabPanel>
                            }
                        </ChildContent>
                        <TabPanelHeader>
                            <MudTooltip Text="Close tab. All data will be lost">
                                <MudIconButton Class="ml-2 pa-1" Color="Color.Error" Icon="@Icons.Material.Filled.Close" OnClick="@((_) => RemoveTab(context))" />
                            </MudTooltip>
                        </TabPanelHeader>
                    </MudTabs>
                </MudPaper>
            </MudItem>

        </MudGrid>       
    </Authorized>
    <NotAuthorized>
        Unauthorized
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudForm _form;
    private string _resourceTypeSelected = "Predefined";
    private PredefinedResourceDropdown _predefinedResourceDropdown;
    
    private List<TabView> _tabs = new();
    private int _activeTabIndex = 0;
    private CancellationTokenSource _cancellationTokenSource = new();
    
    private bool _resourceRequestIsExpanded = false;
    private string _expandResourceRequestButtonIcon = Icons.Material.Filled.ExpandMore;
    
    /// <summary>
    /// 
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var welcomeTab = new TabView
            {
                Id = Guid.NewGuid(),
                Label = $"Welcome",
                K8STerminalFragment = builder =>
                {
                    builder.OpenComponent<WelcomeTerminal>(0);
                    builder.CloseComponent();
                }

            };
            _tabs.Add(welcomeTab);
            _activeTabIndex = _tabs.Count - 1;
            StateHasChanged();
        }
    }
    
    private bool _k8SRequestFormSuccess;
    private List<V1EnvVar> _envVars = new()
    {
        new V1EnvVar { Name = "", Value = "" }
    };
    private void AddEnvVar()
    {
        _envVars.Add(new V1EnvVar("", ""));
    }
    private void DeleteEnvVar(V1EnvVar env)
    {
        _envVars.Remove(env);
    }
    

    // Form fields
    private string _podName = string.Empty;
    private string _containerName;
    private string _containerImage;
    private string _imagePullPolicy = "Always";
    private string _imagePullSecret;
    private string _cmd = "/bin/sh";

    List<int> _sizeOptions = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

    private string GetContainerState(V1ContainerStatus containerStatus)
    {
        if (containerStatus.State?.Waiting != null)
            return $"Waiting: {containerStatus.State.Waiting.Reason}";
        if (containerStatus.State?.Running != null)
            return "Running";
        if (containerStatus.State?.Terminated != null)
            return $"Terminated: {containerStatus.State.Terminated.Reason}";

        return "Unknown";
    }

    /// <summary>
    /// Request Kubernetes resource asynchronously.
    /// </summary>
    private async Task RequestK8SResourceAsync(string username) //Probably should be generic list of ENV variable
    {
        
        if (_resourceTypeSelected == "Predefined")
        {
            //Since there is no deep copy for a k8s pod resources object
            V1Pod tmpPod = KubernetesJson.Deserialize<V1Pod>(KubernetesJson.Serialize(_predefinedResourceDropdown._selectedPredefinedPod));
            //tmpPodContainers =
            V1EnvVar tmpVar = new V1EnvVar("DYNAMIC_USER", username);
            foreach (V1Container container in tmpPod.Spec.Containers)
            {
                if (container.Env == null)
                {
                    container.Env = new List<V1EnvVar>(); // Initialize if null
                }

                container.Env.Add(tmpVar); // Add the environment variable
            }

            tmpPod.Metadata.Name = _predefinedResourceDropdown._selectedPredefinedPod.Metadata.Name 
                                   + "-" + System.Guid.NewGuid().ToString("N")[..4]; 
            await CreatePod(tmpPod);
            return;
        }

        await _form.Validate();
        
        if (string.IsNullOrEmpty(_containerName))
            _containerName = _podName;

        if (_k8SRequestFormSuccess)
        {
            // Create the pod definition
            var pod = new V1Pod
                {
                    ApiVersion = "v1",
                    Kind = "Pod",
                    Metadata = new V1ObjectMeta
                    {
                        Name = _podName
                    },
                    Spec = new V1PodSpec
                    {
                        Containers = new[]
                        {
                        new V1Container
                        {
                            Name = _containerName,
                            Image = _containerImage,
                            ImagePullPolicy = _imagePullPolicy,
                            Env = _envVars
                        }
                    },
                        ImagePullSecrets =
                        [
                            new V1LocalObjectReference
                            {
                                Name = _imagePullSecret
                            }
                        ]
                    }
                };

            bool result = await CreatePod((pod));
        }
    }

    private string GetEnvValueFromV1Pod(V1Pod pod, string variableName)
    {
        string val = pod.Spec?.Containers?.FirstOrDefault()?.Env?.FirstOrDefault(e => e.Name == variableName)?.Value;
        return val ?? "";
    }

    private async Task<bool> CreatePod(V1Pod pod)
    {
        try
        {
            var createdPod = await KubeXTermK8SManager.K8SClient.CoreV1.CreateNamespacedPodAsync(pod, "default");
            Snackbar.Add($"Pod '{createdPod.Metadata.Name}' created successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating pod: {ex.Message}", Severity.Error);
            return false;
        }
        return true;
    }
    
    /// <summary>
    /// Parses a pod from a JSON string.
    /// </summary>
    /// <param name="jsonContent"></param>
    /// <returns></returns>
    private async Task<V1Pod> ParsePodsFromJson(string jsonContent)
    {
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            WriteIndented = true,
            Converters =
            {
                new JsonStringEnumConverter()
            } 
        };

        using var stream = new MemoryStream(Encoding.UTF8.GetBytes(jsonContent));
        // Parse the JSON string to a Kubernetes object
        var pod = await System.Text.Json.JsonSerializer.DeserializeAsync<V1Pod>(stream, options, _cancellationTokenSource.Token);

        return pod;
    }
    







    private Dictionary<string, string> _rowConnectionTypes = new();

    private string GetConnectionType(string podName)
    {
        if (!_rowConnectionTypes.ContainsKey(podName))
        {
            _rowConnectionTypes[podName] = Utils.K8SConnectionType.Bash; // Default value
        }
        return _rowConnectionTypes[podName];
    }

    private void SetConnectionType(string podName, string connectionType)
    {
        _rowConnectionTypes[podName] = connectionType;
    }

    

    private class TabView
    {
        public string Label { get; set; }
        //public string Content { get; set; }
        public RenderFragment K8STerminalFragment { get; set; }
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = false;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(_predefinedResourceDropdown != null)
            await _predefinedResourceDropdown.PopulatePredifinedPodsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        
    }
    
    /// <summary>
    ///
    /// </summary>
    /// <param name="tabPanel"></param>
    public void RemoveTab(MudTabPanel tabPanel)
    {
        // Find the tab by its unique ID
        var tab = _tabs.FirstOrDefault(x => Equals(x.Id, tabPanel.Tag));
        if (tab != null)
        {
            // Get the index of the tab being removed
            var indexToBeRemoved = _tabs.IndexOf(tab);

            // Remove the tab
            _tabs.Remove(tab);

            // Adjust the active index
            if (_activeTabIndex >= _tabs.Count)
            {
                // If the active index is out of bounds, select the last tab
                _activeTabIndex = _tabs.Count - 1;
            }
            else if (_activeTabIndex > indexToBeRemoved)
            {
                // If the active tab is after the removed tab, adjust its index
                _activeTabIndex--;
            }
            else if (_activeTabIndex == indexToBeRemoved)
            {
                //if the active tab is being removed
                _activeTabIndex = 1;

                _activeTabIndex = 0; ;
            }
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel and dispose of the cancellation token source
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource?.Dispose();
    }
}

