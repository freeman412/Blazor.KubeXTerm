@using System.Net.WebSockets
@using System.Text
@using System.Text.Json
@using XtermBlazor
@using k8s
@using Utils
@using KubeXTerm.Services

@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div style="max-width: 100% !important; padding: 10px;" class="overflow-hidden">
    <div style="height: calc(100vh - 195px); width: 100%">
        @* Adjust for header/footer size *@
        <Xterm OnData="@WriteToTerminal"
        Addons="Addons"
        @ref="Term"
        Options="_options"
        OnFirstRender="@OnFirstRender"
        Style="padding: 10px; background-color: #282a36; height: 100%; width: 100%;"
        Class="rounded-lg" 
        OnRender="FitTerminal"
        />
    </div>
</div>

@code 
{

    [Parameter]
    public string Namespace { get; set; } = "default";
    [Parameter, EditorRequired] 
    public required string PodName { get; set; }
    [Parameter]
    public string? ContainerName { get; set; }
    [Parameter, EditorRequired]
    public required IKubernetes K8sContext { get; set; }
    [Parameter, EditorRequired]
    public required string ConnectionType {get; set;}
    [Parameter]
    public string[] Command { get; set; } = new[]
        {
            "/bin/bash"
        };

    //The main Xterm Object
    private Xterm Term;
    private readonly HashSet<string> Addons = new HashSet<string> { "addon-fit" };
    KubeXTermConnectionManager KubeExecutor;
    private TerminalOptions _options;

    //Change to take a parameter at some point - ideally would be an uploaded file? 
    // For now default config works if running in k8s oro  using docker desktop kubernetes.
    KubernetesClientConfiguration k8sConfig = KubernetesClientConfiguration.BuildDefaultConfig();

    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
    private DotNetObjectReference<KubernetesTerminal> dotNetObjectReference;

    /// <summary>
    /// Tracks the Viewport width for resize events.
    /// </summary>
    private int ViewportWidth { get; set; }

    /// <summary>
    /// Tracks the viewport height for resize events.
    /// </summary>
    private int ViewportHeight { get; set; }

    /// <summary>
    /// Sets up the terminal options based on the type of connection.
    /// </summary>
    protected override void OnParametersSet()
    {
        bool _convertEOL = false;
        bool _disableStdin = false;
        // Update _options based on ConnectionType
        if (ConnectionType != K8sConnectionType.BASH)
        {
            _disableStdin = true;
            _convertEOL = true;
        }

        _options = new TerminalOptions
        {
                CursorBlink = true,
                CursorStyle = CursorStyle.Bar,
                FontFamily = "monospace",
                ConvertEOL = _convertEOL,
                DisableStdin = _disableStdin,

                Theme =
            {
                Background = "#282a36",
                Foreground = "#bacfc7"
            },
         };

    }

    /// <summary>
    /// Method called from the JavaScript watcher for user (browser) initiated resizing.
    /// </summary>
    /// <param name="width">The new width of the viewport.</param>
    /// <param name="height">The new height of the viewport.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    [JSInvokable]
    public async Task OnResize(int width, int height)
    {
        if (ViewportWidth == width && ViewportHeight == height) 
            return;
        ViewportWidth = width;
        ViewportHeight = height;
        await FitTerminal();
        StateHasChanged();
    }

    /// <summary>
    /// Registers the viewport watcher and performs the initial resize of the terminal.
    /// </summary>
    /// <param name="firstRender">Indicates whether this is the first render.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try{
            if (firstRender)
            {
                dotNetObjectReference = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("window.registerViewportChangeCallback", dotNetObjectReference);
            }

            await SendResize();

        }catch(Exception e)
        {
            //Not a big deal, the component is gone
            Console.WriteLine($"Error in OnAfterRenderAsync: {e.Message}");
        }
    }

    /// <summary>
    /// Sends the resize command to the KubeExecutor.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task SendResize()
    {
        if (KubeExecutor != null)
        {
            int rows = await Term.GetRows();
            int cols = await Term.GetColumns();
            await KubeExecutor.SendResizeCommandAsync(rows, cols);
        }
    }

    /// <summary>
    /// The first render method for the XTerm component. Sets up the connection to k8s and fits the terminal to the window.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task OnFirstRender()
    {
        //Initialize the kubernetes executor
        KubeExecutor = new KubeXTermConnectionManager(Term, K8sContext, Namespace);
        await FitTerminal();

        if(ConnectionType != K8sConnectionType.BASH)
        {
            _options.DisableStdin = true;
            _options.ConvertEOL = true;
        }


        await StartTerminalConnection();

    }

    /// <summary>
    /// Fits the terminal to the current browser window size.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task FitTerminal()
    {
        //Tell the javacript XTerm to fit the container
        await Term.Addon("addon-fit").InvokeVoidAsync("fit");

        //Tell websocket in kubernetes about the resize
        await SendResize();
    }

    /// <summary>
    /// Sets up the terminal connection based on the requested type.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task StartTerminalConnection()
    {
        try
        {
            if (ConnectionType == K8sConnectionType.BASH)
                await KubeExecutor.ExecInPod(PodName, ContainerName, Command);
            else if (ConnectionType == K8sConnectionType.STDOUT)
                await KubeExecutor.StdOutInPod(PodName, ContainerName);
            else if (ConnectionType == K8sConnectionType.LOGS)
                await KubeExecutor.LogsInPodAync(PodName, ContainerName);
            else if (ConnectionType == K8sConnectionType.STDERR)
                await KubeExecutor.StdErrInPod(PodName, ContainerName);
            else if (ConnectionType == K8sConnectionType.ALLLOGS)
                await KubeExecutor.AllLogsAsync(PodName, ContainerName);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error in StartTerminalConnection: {e.Message}");
            Term.WriteLine("Unable to initiate terminal connection.");
        }
    }

    /// <summary>
    /// Writes data to the terminal. This method is called from the OnData function.
    /// </summary>
    /// <param name="data">The data to write to the terminal.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task WriteToTerminal(string data)
    {
        await KubeExecutor.WriteStream(data);
    }

    /// <summary>
    /// Disposes of resources used by the component.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    public async ValueTask DisposeAsync()
    {
        try
        {
                // Dispose of JSInterop callbacks
            if (dotNetObjectReference != null)
            {
                dotNetObjectReference.Dispose();
                await JSRuntime.InvokeVoidAsync("window.unregisterViewportChangeCallback");
            }
            // Dispose of the KubeExecutor resource
            KubeExecutor?.DisposeAsync();
        }
        catch (Exception ex)
        {
            // Handle any exceptions that might occur during stream write operations
            Console.WriteLine($"Error while Disposing of Terminal: {ex.Message}");
        }

        // Cancel and dispose of the cancellation token source
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}
